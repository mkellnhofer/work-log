package component

import (
	"kellnhofer.com/work-log/web/model"
	"kellnhofer.com/work-log/web/view"
)

// This template is used to render the action buttons on the overview page.
templ OverviewActions(currMonth string) {
	<a
		class="btn btn-primary"
		href={ toURL("/overview/export?month=" + currMonth) }
		aria-label={ getText("overviewActionExport") }
	>
		{ getText("overviewActionExport") }
	</a>
}

// This template is used to render the content of the overview page.
templ OverviewContent(entries *model.OverviewEntries) {
	<div id="wl-overview-content" class="pb-3">
		@overviewMonthButtons(entries.PrevMonth, entries.NextMonth, entries.CurrMonthName)
		@overviewSummary(entries.Summary)
		@overviewDays(entries.Weeks)
		@overviewEntries(entries.EntriesDays)
	</div>
}

templ overviewMonthButtons(prevMonth string, nextMonth string, currMonthName string) {
	<div class="mb-4">
		<nav>
			<ul class="pagination">
				@overviewMonthButton(prevMonth, "#wl-overview-content", "actionPrevious", "&lt;")
				@overviewMonth(currMonthName)
				@overviewMonthButton(nextMonth, "#wl-overview-content", "actionNext", "&gt;")
			</ul>
		</nav>
	</div>
}

templ overviewMonthButton(month string, hxTarget string, labelTextRef string, icon string) {
	<li class="page-item">
		<a
			class="page-link"
			href="#"
			hx-trigger="click"
			hx-get={ buildOverviewMonthHxGetUrl(month) }
			hx-target={ hxTarget }
			hx-swap="outerHTML"
			hx-push-url="true"
			aria-label={ getText(labelTextRef) }
		>
			@templ.Raw(icon)
		</a>
	</li>
}

templ overviewMonth(currMonthName string) {
	<li class="page-item px-4 pt-2">
		<h3>{ currMonthName }</h3>
	</li>
}

func buildOverviewMonthHxGetUrl(month string) string {
	return "overview?month=" + month
}

templ overviewSummary(summary *model.OverviewEntriesSummary) {
	<div class="border rounded-2 mb-4 px-3 pt-3 pb-2">
		<div class="row align-items-center">
			@overviewSummaryActualTarget(summary)
			@overviewSummaryProgress(summary)
		</div>
	</div>
}

templ overviewSummaryActualTarget(summary *model.OverviewEntriesSummary) {
	<div class="col-12 col-sm-3 text-center">
		<h2>{ getText("overviewSummaryHeaderActTrg") }</h2>
		<p class="mb-2">
			<span class="fs-5">{ summary.MonthActualHours }</span>
			<span>/</span>
			<span>{ summary.MonthTargetHours + " " + getText("hoursUnit") }</span>
		</p>
	</div>
}

templ overviewSummaryProgress(summary *model.OverviewEntriesSummary) {
	<div class="col-12 col-sm-9 text-center">
		@overviewSummaryProgressBar(summary)
		@overviewSummaryProgressBarLabels(summary)
	</div>
}

templ overviewSummaryProgressBar(summary *model.OverviewEntriesSummary) {
	<div class="mb-2 mx-sm-3">
		@templ.Raw(view.CreateOverviewSummaryProgressSvg(summary.TypePercentages))
	</div>
}

templ overviewSummaryProgressBarLabels(summary *model.OverviewEntriesSummary) {
	<div class="mb-2">
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdWork],
			"entryTypeWork",
			summary.TypeHours[model.EntryTypeIdWork],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdTravel],
			"entryTypeTravel",
			summary.TypeHours[model.EntryTypeIdTravel],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdVacation],
			"entryTypeVacation",
			summary.TypeHours[model.EntryTypeIdVacation],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdHoliday],
			"entryTypeHoliday",
			summary.TypeHours[model.EntryTypeIdHoliday],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdIllness],
			"entryTypeIllness",
			summary.TypeHours[model.EntryTypeIdIllness],
		)
		@overviewSummaryProgressBarLabel(view.OverviewSummaryProgressColorRem,
			"overviewSummaryProgressLabelRem", summary.RemainingHours)
	</div>
}

templ overviewSummaryProgressBarLabel(color string, labelTextRef string, value string) {
	<p class="d-inline-block mb-2 px-2">
		<span { templ.Attributes{"style": "color:" + color + ";"}... }>‚óè</span>
		<span>{ getText(labelTextRef) + ":" }</span>
		<span class="fw-bold">{ value + getText("hoursShortUnit") }</span>
	</p>
}

templ overviewDays(weeks []*model.OverviewWeek) {
	@overviewDaysHeader()
	@overviewDaysTable(weeks)
}

templ overviewDaysHeader() {
	<div class="mb-4">
		<h2>{ getText("overviewHeadingDays") }</h2>
	</div>
}

templ overviewDaysTable(weeks []*model.OverviewWeek) {
	<div class="table-responsive table-responsive-xl mb-4">
		<table class="table table-sm table-bordered mb-0">
			@overviewDaysTableHeader()
			@overviewDaysTableBody(weeks)
		</table>
	</div>
}

templ overviewDaysTableHeader() {
	<thead>
		<tr class="wl-overview-table-head text-center">
			<th class="col-1">{ getText("weekdayMon") }</th>
			<th class="col-1">{ getText("weekdayTue") }</th>
			<th class="col-1">{ getText("weekdayWed") }</th>
			<th class="col-1">{ getText("weekdayThu") }</th>
			<th class="col-1">{ getText("weekdayFri") }</th>
			<th class="col-1">{ getText("weekdaySat") }</th>
			<th class="col-1">{ getText("weekdaySun") }</th>
		</tr>
	</thead>
}

templ overviewDaysTableBody(weeks []*model.OverviewWeek) {
	<tbody>
		for _, week := range weeks {
			@overviewDaysTableRow(week)
		}
	</tbody>
}

templ overviewDaysTableRow(week *model.OverviewWeek) {
	<tr>
		for _, weekDay := range week.WeekDays {
			@overviewDaysTableCell(weekDay)
		}
	</tr>
}

templ overviewDaysTableCell(weekDay *model.OverviewWeekDay) {
	if weekDay != nil {
		<td
			if weekDay.IsWeekendDay {
				class="wl-overview-table-weekend p-0"
			} else {
				class="p-0"
			}
		>
			@overviewDaysTableCellHeader(weekDay)
			@overviewDaysTableCellBody(weekDay)
		</td>
	} else {
		<td class="wl-overview-table-nonrelevant"></td>
	}
}

templ overviewDaysTableCellHeader(weekDay *model.OverviewWeekDay) {
	<div class="d-flex">
		@overviewDaysTableCellHeaderMarker(weekDay.IsType, model.EntryTypeIdWork)
		@overviewDaysTableCellHeaderMarker(weekDay.IsType, model.EntryTypeIdTravel)
		@overviewDaysTableCellHeaderMarker(weekDay.IsType, model.EntryTypeIdVacation)
		@overviewDaysTableCellHeaderMarker(weekDay.IsType, model.EntryTypeIdHoliday)
		@overviewDaysTableCellHeaderMarker(weekDay.IsType, model.EntryTypeIdIllness)
	</div>
	<div class="position-relative">
		<p class="position-absolute top-0 start-0 fs-7 p-2">{ weekDay.Date }</p>
	</div>
}

templ overviewDaysTableCellHeaderMarker(isType map[int]bool, typeId int) {
	if isType[typeId] {
		<div
			class="flex-fill border-top border-2"
			{ createBorderColorStyle(model.EntryTypeColors[typeId])... }
		></div>
	}
}

templ overviewDaysTableCellBody(weekDay *model.OverviewWeekDay) {
	<div class="mt-3 mt-md-0 p-2 text-center">
		if weekDay.Hours != "" {
			@overviewDaysTableCellBodyData(weekDay)
		} else {
			@overviewDaysTableCellBodyEmpty()
		}
	</div>
}

templ overviewDaysTableCellBodyData(weekDay *model.OverviewWeekDay) {
	<p class="fs-6 fw-bold mt-2 mb-1">{ weekDay.Hours + getText("hoursShortUnit") }</p>
	<p class="fs-7 mb-1">{ weekDay.StartTime + " - " + weekDay.EndTime }</p>
	if weekDay.BreakHours != "" {
		<p class="fs-7 mb-2">
			{ "( " + weekDay.BreakHours + getText("hoursShortUnit") + " " + getText("labelBreak") + " )" }
		</p>
	}
}

templ overviewDaysTableCellBodyEmpty() {
	<p class="fs-6 fw-bold my-2">-</p>
}

templ overviewEntries(entriesDays []*model.OverviewEntriesDay) {
	@overviewEntriesHeader()
	@overviewEntriesTable(entriesDays)
}

templ overviewEntriesHeader() {
	<div class="mb-4">
		<h2>{ getText("overviewHeadingEntries") }</h2>
	</div>
}

templ overviewEntriesTable(entriesDays []*model.OverviewEntriesDay) {
	<div class="table-responsive table-responsive-xl mb-4">
		<table class="table table-sm mb-0">
			@overviewEntriesTableHeader()
			@overviewEntriesTableBody(entriesDays)
		</table>
	</div>
}

templ overviewEntriesTableHeader() {
	<thead>
		<tr class="wl-overview-table-head">
			<th class="wl-overview-table-column-date">{ getText("tableColDate") }</th>
			<th class="wl-overview-table-column-type">{ getText("tableColType") }</th>
			<th class="wl-overview-table-column-time">{ getText("tableColStart") }</th>
			<th class="wl-overview-table-column-time">{ getText("tableColEnd") }</th>
			<th class="wl-overview-table-column-time">{ getText("tableColNet") }</th>
			<th class="wl-overview-table-column-activity">{ getText("tableColActivity") }</th>
			<th class="wl-overview-table-column-description">{ getText("tableColDescription") }</th>
		</tr>
	</thead>
}

templ overviewEntriesTableBody(entriesDays []*model.OverviewEntriesDay) {
	<tbody>
		for _, entriesDay := range entriesDays {
			@overviewEntryDaysTableRow(entriesDay)
		}
	</tbody>
}

templ overviewEntryDaysTableRow(entriesDay *model.OverviewEntriesDay) {
	if len(entriesDay.Entries) > 0 {
		@overviewEntryDaysTableRowData(entriesDay)
	} else {
		@overviewEntryDaysTableRowEmpty(entriesDay)
	}
}

templ overviewEntryDaysTableRowData(entriesDay *model.OverviewEntriesDay) {
	for ei, entry := range entriesDay.Entries {
		if entry.IsMissing {
			<tr><td colspan="7"></td></tr>
		} else {
			<tr
				if entriesDay.IsWeekendDay {
					class="wl-overview-table-weekend"
				}
			>
				if ei == 0 {
					<td class="fw-bold">{ entriesDay.Weekday } { entriesDay.Date }</td>
				} else {
					<td></td>
				}
				<td class="p-0">
					<div
						class="border-start border-2 ps-2 p-1"
						{ createBorderColorStyle(model.EntryTypeColors[entry.TypeId])... }
					>
						{ entry.Type }
					</div>
				</td>
				<td>{ entry.StartTime }</td>
				<td>{ entry.EndTime }</td>
				<td
					if len(entriesDay.Entries) == 1 {
						class="fw-bold"
					}
				>
					{ entry.Duration }
				</td>
				<td>{ entry.Activity }</td>
				<td>{ entry.Description }</td>
			</tr>
		}
	}
	if len(entriesDay.Entries) > 1 {
		<tr
			if entriesDay.IsWeekendDay {
				class="wl-overview-table-weekend"
			}
		>
			<td colspan="4"></td>
			<td class="fw-bold">{ entriesDay.Hours }</td>
			<td colspan="2"></td>
		</tr>
	}
}

templ overviewEntryDaysTableRowEmpty(entriesDay *model.OverviewEntriesDay) {
	<tr
		if entriesDay.IsWeekendDay {
			class="wl-overview-table-weekend"
		}
	>
		<td class="fw-bold">{ entriesDay.Weekday } { entriesDay.Date }</td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td></td>
		<td></td>
	</tr>
}

func createBorderColorStyle(color string) templ.Attributes {
	return templ.Attributes{"style": "border-color:" + color + " !important;"}
}
