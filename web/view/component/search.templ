package component

import (
	"kellnhofer.com/work-log/web/model"
)

// This template is used to render the action buttons on the search page.
templ SearchActions() {
}

// This template is used to render the content of the search page.
templ SearchContent(errorMessage string, search *model.Search, searchEntries *model.SearchEntries) {
	<div id="wl-search-content">
		@searchErrorMessageContainer(errorMessage)
		@searchEntryFormContainer(search)
		@SearchResult(searchEntries)
	</div>
}

templ searchErrorMessageContainer(errorMessage string) {
	<div id="wl-search-error">
		@ErrorMessage(errorMessage)
	</div>
}

templ searchEntryFormContainer(search *model.Search) {
	<div id="wl-search-form" class="border rounded-2 mb-4 px-3 py-1">
		@SearchEntryForm(search)
	</div>
}

// This template is used to render the search form. After the form has been submitted, the search
// results are loaded into the search result container.
templ SearchEntryForm(search *model.Search) {
	<form
		action="#"
		hx-post="/search"
		hx-target="#wl-search-result"
		hx-swap="outerHTML"
	>
		@searchEntryFormControls(search.EntryTypes, search.EntryActivities, search.SearchInput)
	</form>
}

templ searchEntryFormControls(entryTypes []*model.EntryType, entryActivities []*model.EntryActivity,
	searchInput *model.SearchInput) {
	<div class="row">
		<div class="col-12 col-sm-5 col-md-4 pt-1">
			<label class="mb-2" for="wl-search-input-by-type">
				{ getText("formLabelType") }
			</label>
			<div class="input-group">
				<div class="input-group-text">
					<input
						id="wl-search-input-by-type"
						class="checkbox"
						name="by-type"
						type="checkbox"
						if searchInput.ByType {
							checked
						}
					/>
				</div>
				<select
					id="wl-searc-input-type"
					class="form-select"
					name="type"
					hx-get="/search/activities"
					hx-target="#wl-search-input-activity"
					hx-swap="innerHTML"
				>
					@EntryTypeSelectOptions(entryTypes, searchInput.TypeId)
				</select>
			</div>
		</div>
		<div class="col-12 col-sm-7 col-md-4 py-1">
			<label class="mb-2" for="wl-search-input-by-date">
				{ getText("formLabelFrom") }
			</label>
			<div class="input-group">
				<div class="input-group-text">
					<input
						id="wl-search-input-by-date"
						class="checkbox"
						name="by-date"
						type="checkbox"
						if searchInput.ByDate {
							checked
						}
					/>
				</div>
				<input class="form-control" name="start-date" type="date" value={ searchInput.StartDate }/>
				<input class="form-control" name="end-date" type="date" value={ searchInput.EndDate }/>
			</div>
		</div>
		<div class="col-12 col-sm-12 col-md-4 py-1">
			<label class="mb-2" for="wl-search-input-by-activity">
				{ getText("formLabelActivity") }
			</label>
			<div class="input-group">
				<div class="input-group-text">
					<input
						id="wl-search-input-by-activity"
						class="checkbox"
						name="by-activity"
						type="checkbox"
						if searchInput.ByActivity {
							checked
						}
					/>
				</div>
				<select id="wl-search-input-activity" class="form-select" name="activity">
					@EntryActivitySelectOptions(entryActivities, searchInput.ActivityId)
				</select>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 py-1">
			<label class="mb-2" for="wl-search-input-by-description">
				{ getText("formLabelDescription") }
			</label>
			<div class="input-group">
				<div class="input-group-text">
					<input
						id="wl-search-input-by-description"
						class="checkbox"
						name="by-description"
						type="checkbox"
						if isSearchInputEmpty(searchInput) || searchInput.ByDescription {
							checked
						}
					/>
				</div>
				<input
					class="form-control"
					name="description"
					type="text"
					value={ searchInput.Description }
					if isSearchInputEmpty(searchInput) {
						autofocus
					}
				/>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 py-3">
			<button
				class="btn btn-primary"
				type="submit"
				if !isSearchInputEmpty(searchInput) {
					autofocus
				}
			>
				{ getText("searchActionSearch") }
			</button>
		</div>
	</div>
}

func isSearchInputEmpty(searchInput *model.SearchInput) bool {
	return !searchInput.ByType && !searchInput.ByDate && !searchInput.ByActivity &&
		!searchInput.ByDescription
}

// This template is used to render the search result. When the HTMX event "wlChangedEntries" is
// received, the search result is reloaded.
templ SearchResult(entries *model.SearchEntries) {
	<div
		id="wl-search-result"
		hx-get={ buildSearchPageHxGetUrl(entries.Query, entries.PageNum) }
		hx-trigger="wlChangedEntries from:body"
		hx-target="this"
		hx-swap="outerHTML"
	>
		@searchEntryList(entries)
		@searchPagingControl(entries.Query, entries.HasPrevPage, entries.PrevPageNum,
			entries.HasNextPage, entries.NextPageNum)
	</div>
}

templ searchEntryList(entries *model.SearchEntries) {
	if len(entries.Days) > 0 {
		@EntryList(entries.Days, false, false)
	} else {
		<div class="m-5 text-center">
			<p class="p-5">
				{ getText("searchListLabelNoEntries") }
			</p>
		</div>
	}
}

templ searchPagingControl(query string, hasPrevPage bool, prevPageNum int, hasNextPage bool,
	nextPageNum int) {
	@PagingControl("#wl-search-result", hasPrevPage, buildSearchPageHxGetUrl(query, prevPageNum),
		hasNextPage, buildSearchPageHxGetUrl(query, nextPageNum))
}

func buildSearchPageHxGetUrl(query string, pageNum int) string {
	return "search?query=" + query + "&page=" + toString(pageNum)
}
