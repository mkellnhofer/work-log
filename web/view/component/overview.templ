package component

import (
	"kellnhofer.com/work-log/web/model"
	"kellnhofer.com/work-log/web/view"
)

// This template is used to render the action buttons on the overview page.
templ OverviewActions(currMonth string) {
	<a
		class="btn btn-primary"
		href={ toURL("/overview/export?month=" + currMonth) }
		aria-label={ getText("overviewActionExport") }
	>
		{ getText("overviewActionExport") }
	</a>
}

// This template is used to render the content of the overview page.
templ OverviewContent(entries *model.OverviewEntries) {
	<div id="wl-overview-content">
		@overviewMonthButtons(entries.PrevMonth, entries.NextMonth, entries.CurrMonthName)
		@overviewSummary(entries.Summary)
		@overviewEntryList(entries.Days)
	</div>
}

templ overviewMonthButtons(prevMonth string, nextMonth string, currMonthName string) {
	<div class="mb-4">
		@overviewMonthButton(prevMonth, "#wl-overview-content", "actionPrevious", "&lt;")
		<span class="mx-4">{ currMonthName }</span>
		@overviewMonthButton(nextMonth, "#wl-overview-content", "actionNext", "&gt;")
	</div>
}

templ overviewMonthButton(month string, hxTarget string, labelTextRef string, icon string) {
	<a
		class="btn btn-light"
		href="#"
		hx-trigger="click"
		hx-get={ buildOverviewMonthHxGetUrl(month) }
		hx-target={ hxTarget }
		hx-swap="outerHTML"
		hx-push-url="true"
		aria-label={ getText(labelTextRef) }
	>
		@templ.Raw(icon)
	</a>
}

func buildOverviewMonthHxGetUrl(month string) string {
	return "overview?month=" + month
}

templ overviewSummary(summary *model.OverviewEntriesSummary) {
	<div class="border rounded-2 mb-4 px-3 pt-3 pb-2">
		<div class="row align-items-center">
			@overviewSummaryActualTarget(summary)
			@overviewSummaryProgress(summary)
		</div>
	</div>
}

templ overviewSummaryActualTarget(summary *model.OverviewEntriesSummary) {
	<div class="col-12 col-sm-3 text-center">
		<h2 class="fw-bold">{ getText("overviewSummaryHeaderActTrg") }</h2>
		<p class="mb-2">
			<span class="fs-5">{ summary.MonthActualHours }</span>
			<span>/</span>
			<span>{ summary.MonthTargetHours + " " + getText("hoursUnit") }</span>
		</p>
	</div>
}

templ overviewSummaryProgress(summary *model.OverviewEntriesSummary) {
	<div class="col-12 col-sm-9 text-center">
		@overviewSummaryProgressBar(summary)
		@overviewSummaryProgressBarLabels(summary)
	</div>
}

templ overviewSummaryProgressBar(summary *model.OverviewEntriesSummary) {
	<div class="mb-2 mx-sm-3">
		@templ.Raw(view.CreateOverviewSummaryProgressSvg(summary.TypePercentages))
	</div>
}

templ overviewSummaryProgressBarLabels(summary *model.OverviewEntriesSummary) {
	<div class="mb-2">
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdWork],
			"entryTypeWork",
			summary.TypeHours[model.EntryTypeIdWork],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdTravel],
			"entryTypeTravel",
			summary.TypeHours[model.EntryTypeIdTravel],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdVacation],
			"entryTypeVacation",
			summary.TypeHours[model.EntryTypeIdVacation],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdHoliday],
			"entryTypeHoliday",
			summary.TypeHours[model.EntryTypeIdHoliday],
		)
		@overviewSummaryProgressBarLabel(
			model.EntryTypeColors[model.EntryTypeIdIllness],
			"entryTypeIllness",
			summary.TypeHours[model.EntryTypeIdIllness],
		)
		@overviewSummaryProgressBarLabel(view.OverviewSummaryProgressColorRem,
			"overviewSummaryProgressLabelRem", summary.RemainingHours)
	</div>
}

templ overviewSummaryProgressBarLabel(color string, labelTextRef string, value string) {
	<p class="d-inline-block mb-2 px-2">
		<span { templ.Attributes{"style": "color:" + color + ";"}... }>‚óè</span>
		<span>{ getText(labelTextRef) + ":" }</span>
		<span class="fw-bold">{ value + getText("hoursShortUnit") }</span>
	</p>
}

templ overviewEntryList(days []*model.OverviewEntriesDay) {
	@overviewEntryListHeader()
	@overviewEntryDaysTable(days)
}

templ overviewEntryListHeader() {
	<div class="mb-4">
		<h2 class="fw-bold">{ getText("overviewHeadingEntries") }</h2>
	</div>
}

templ overviewEntryDaysTable(days []*model.OverviewEntriesDay) {
	<div class="table-responsive table-responsive-xl mb-4">
		<table class="table table-sm">
			@overviewEntryDaysTableHeader()
			@overviewEntryDaysTableBody(days)
		</table>
	</div>
}

templ overviewEntryDaysTableHeader() {
	<thead>
		<tr class="wl-overview-table-head">
			<th class="wl-overview-table-column-date">{ getText("tableColDate") }</th>
			<th class="wl-overview-table-column-type">{ getText("tableColType") }</th>
			<th class="wl-overview-table-column-time">{ getText("tableColStart") }</th>
			<th class="wl-overview-table-column-time">{ getText("tableColEnd") }</th>
			<th class="wl-overview-table-column-time">{ getText("tableColNet") }</th>
			<th class="wl-overview-table-column-activity">{ getText("tableColActivity") }</th>
			<th class="wl-overview-table-column-description">{ getText("tableColDescription") }</th>
		</tr>
	</thead>
}

templ overviewEntryDaysTableBody(days []*model.OverviewEntriesDay) {
	<tbody>
		for _, day := range days {
			@overviewEntryDaysTableRow(day)
		}
	</tbody>
}

templ overviewEntryDaysTableRow(day *model.OverviewEntriesDay) {
	if len(day.Entries) > 0 {
		for ei, entry := range day.Entries {
			<tr
				if day.IsWeekendDay {
					class="wl-overview-table-row-weekend"
				}
			>
				if ei == 0 {
					<td>{ day.Weekday } { day.Date }</td>
				} else {
					<td></td>
				}
				<td>{ entry.EntryType }</td>
				<td>{ entry.StartTime }</td>
				<td>{ entry.EndTime }</td>
				<td>{ entry.Duration }</td>
				<td>{ entry.EntryActivity }</td>
				<td>{ entry.Description }</td>
			</tr>
		}
		if len(day.Entries) > 1 {
			<tr
				if day.IsWeekendDay {
					class="wl-overview-table-row-weekend"
				}
			>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
				<td>{ day.WorkDuration }</td>
				<td></td>
				<td></td>
			</tr>
		}
	} else {
		<tr
			if day.IsWeekendDay {
				class="wl-overview-table-row-weekend"
			}
		>
			<td>{ day.Weekday } { day.Date }</td>
			<td>-</td>
			<td>-</td>
			<td>-</td>
			<td>-</td>
			<td></td>
			<td></td>
		</tr>
	}
}
